openapi: 3.0.3
info:
  title: Ziit API
  description: |-
    This is the API documentation for Ziit, a coding activity tracker.
    The API allows you to submit coding activity heartbeats, retrieve statistics, and access user information.
  version: 1.0.0
  contact:
    email: support@ziit.app
  license:
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
servers:
  - url: https://ziit.app
    description: Production Server
tags:
  - name: API Routes
    description: External API endpoints for tracking coding activity
  - name: Public Routes
    description: Public API endpoints that don't require authentication
paths:
  /api/external/heartbeats:
    post:
      tags:
        - API Routes
      summary: Create a single heartbeat
      description: Accepts one heartbeat payload authenticated via Bearer API key.
      operationId: postExternalHeartbeat
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Heartbeat"
      responses:
        "200":
          description: Heartbeat created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        "400":
          description: Validation error
        "401":
          description: Invalid or missing API key
        "500":
          description: Server error
  /api/external/batch:
    post:
      tags:
        - API Routes
      summary: Create multiple heartbeats
      description: Accepts up to 2000 heartbeats in a single request authenticated via Bearer API key.
      operationId: postExternalBatchHeartbeats
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Heartbeat"
              minItems: 1
              maxItems: 2000
      responses:
        "200":
          description: Heartbeats processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  ids:
                    type: array
                    items:
                      type: string
        "400":
          description: Validation error
        "401":
          description: Invalid or missing API key
        "500":
          description: Server error
  /api/external/stats:
    get:
      tags:
        - API Routes
      summary: Get stats via API key
      description: Returns aggregated stats for the user identified by the Bearer API key.
      operationId: getExternalStats
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: timeRange
          required: false
          schema:
            type: string
            enum:
              - today
              - yesterday
              - week
              - month
              - month_to_date
              - last_month
              - year_to_date
              - last_12_months
              - all_time
            default: today
        - in: query
          name: midnightOffsetSeconds
          required: false
          schema:
            type: integer
          description: Offset in seconds from midnight for day boundaries
      responses:
        "200":
          description: Stats result
        "400":
          description: Invalid parameters
        "401":
          description: Invalid or missing API key
        "500":
          description: Server error
  /api/external/user:
    get:
      tags:
        - API Routes
      summary: Get user via API key
      description: Returns public user data for the account identified by the Bearer API key.
      operationId: getExternalUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid or missing API key
        "404":
          description: User not found
        "500":
          description: Server error
  /api/public/stats:
    get:
      tags:
        - Public
        - Stats
      summary: Get public platform stats
      description: Returns aggregate statistics across the platform.
      operationId: getPublicStats
      responses:
        "200":
          description: Public stats payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicStats"
        "500":
          description: Failed to fetch stats
  /api/public/leaderboard:
    get:
      tags:
        - Public Routes
      summary: Get public leaderboard
      description: Returns public leaderboard data showing top users.
      operationId: getPublicLeaderboard
      responses:
        "200":
          description: Leaderboard data
  /api/public/{badge}:
    get:
      tags:
        - Public Routes
      summary: Generate public stats badge
      description: Returns an SVG badge representing time spent. URL path segments define badge parameters.
      operationId: getPublicBadge
      parameters:
        - in: path
          name: badge
          required: true
          schema:
            type: string
          description: Path segments for badge configuration (userId/project/timeRange/color/labelText)
        - in: query
          name: style
          required: false
          schema:
            type: string
            enum:
              - classic
              - flat
            default: flat
          description: Badge style
        - in: query
          name: icon
          required: false
          schema:
            type: string
          description: Icon to display on badge
      responses:
        "200":
          description: SVG badge
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: Invalid parameters
components:
  schemas:
    Heartbeat:
      type: object
      required:
        - timestamp
        - project
        - language
        - editor
        - os
        - file
      properties:
        timestamp:
          oneOf:
            - type: string
              format: date-time
            - type: number
          example: "2023-10-15T14:30:00Z"
          description: "ISO 8601 timestamp; numeric epoch also accepted."
        project:
          type: string
          maxLength: 255
          example: "my-awesome-project"
        language:
          type: string
          maxLength: 50
          example: "javascript"
        editor:
          type: string
          maxLength: 50
          example: "vscode"
        os:
          type: string
          maxLength: 50
          example: "macos"
        branch:
          type: string
          maxLength: 255
          example: "main"
        file:
          type: string
          maxLength: 255
          example: "App.js"
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: "user@example.com"
        githubId:
          type: string
        githubUsername:
          type: string
        apiKey:
          type: string
          format: uuid
        keystrokeTimeout:
          type: integer
    PublicStats:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 1500
        totalHeartbeats:
          type: integer
          example: 5000000
        totalHours:
          type: integer
          example: 25000
        topEditor:
          type: string
          example: "vscode"
        topLanguage:
          type: string
          example: "javascript"
        topOS:
          type: string
          example: "macos"
        lastUpdated:
          type: string
          format: date-time
        source:
          type: string
          enum: ["mixed", "live"]
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID
